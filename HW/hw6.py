# ЗАДАЧА №1
#Известно, что генеральная совокупность распределена нормально
# со средним квадратическим отклонением, равным 16.
# Найти доверительный интервал для оценки математического ожидания
# a с надежностью 0.95,
# если выборочная средняя M = 80, а объем выборки n = 256.

import numpy as np
from scipy import stats

def task1():
    sigma = 16
    a = 1 - 0.95
    M = 80
    n = 256

    Zt = 1.96 # a/2 = 0.05/2
    X1 = M - Zt * (sigma / np.sqrt(n))
    X2 = M + Zt * (sigma / np.sqrt(n))
    print(f"доверительный интервал: [{X1} : {X2}] ")
    # доверительный интервал: [78.04 : 81.96]

# task1()

# ЗАДАЧА №2
#В результате 10 независимых измерений некоторой величины X, выполненных
# с одинаковой точностью,получены опытные данные:
# 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
# Предполагая, что результаты измерений подчинены нормальному закону распределения вероятностей,
# оценить истинное значение величины X при помощи доверительного интервала, покрывающего это
# значение с доверительной вероятностью 0,95.

def task2():
    x = np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
    a = 1 - 0.95
    ta_2 = 1 - a/2
    n = len(x)
    sigma = np.std(x, ddof=1) #0.451
    print('sigma=', round(sigma, 3))
    M = np.mean(x) #6.59
    print("M=", round(M, 3))
    t = stats.t.ppf(ta_2, n - 1) #2.262
    print('t', round(t, 3))
    X1 = M - t * sigma / np.sqrt(n)
    X2 = M + t * sigma / np.sqrt(n)
    print(f"доверительный интервал: [{round(X1, 3)} : {round(X2, 3)}] ")
    # истинное значение X лежит в доверительном интервале: [6.268 : 6.912]

# task2()

# ЗАДАЧА №3
# 3 Рост дочерей 175, 167, 154, 174, 178, 148, 160, 167, 169, 170
# Рост матерей 178, 165, 165, 173, 168, 155, 160, 164, 178, 175
#
# Используя эти данные построить 95% доверительный интервал для
# разности среднего роста родителей и детей.

def task3():
    H_d = np.array([175, 167, 154, 174, 178, 148, 160, 167, 169, 170])
    H_m = np.array([178, 165, 165, 173, 168, 155, 160, 164, 178, 175])
    a = 1 - 0.95
    ta_2 = 1 - a / 2
    n1 = len(H_d)
    n2 = len(H_m)
    n = n1 # объем выборки
    D1 = np.var(H_d, ddof=1)
    D2 = np.var(H_m, ddof=1)
    D = (D1 + D2) / 2 # сред дисперсия двух выборок
    print('D=', round(D, 3)) #D= 75.583
    M1 = np.mean(H_d)
    M2 = np.mean(H_m)
    delta = M1 - M2 # Дельта
    SE = np.sqrt(D/n1 + D/n2) # стандартн ошибка разности средних
    print('SE=', round(SE, 3))
    df = 2 * (n - 1)
    print("M1=", round(M1, 3), "M2=", round(M2, 3)) # M1= 166.2 M2= 168.1
    print('delta=', round(delta, 3)) # delta= -1.9
    t = stats.t.ppf(ta_2, df) # t= 2.101
    print('t=', round(t, 3))
    Low = delta - t * SE # ниж граница интервала
    Up = delta + t * SE # верх граница интервала
    print(f"доверительный интервал для разности среднего: [{round(Low, 3)} : {round(Up, 3)}] ")
    #доверительный интервал для разности среднего: [-10.068 : 6.268]

task3()
