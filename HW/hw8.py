import scipy.stats as stats
import numpy as np

# ЗАДАЧА 1
# Даны значения величины заработной платы заемщиков банка (zp) и значения
# их поведенческого кредитного скоринга (ks):
# zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Найдите ковариацию этих двух величин с помощью элементарных действий,
# а затем с помощью функции cov из numpy
# Полученные значения должны быть равны.
# Найдите коэффициент корреляции Пирсона с помощью ковариации и
# среднеквадратичных отклонений двух признаков,
# а затем с использованием функций из библиотек numpy и pandas.

def task1():
    zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
    ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])
    cov = np.mean(zp * ks) - np.mean(zp) * np.mean(ks)
    print('cov =', cov)  #cov = 9157.839999999997
    cov_np = np.cov(zp, ks, ddof=0)
    print('cov_np=', cov_np[0, 1]) #cov_np= 9157.84

    sigma1 = np.std(zp) #sigma1 = 59.115
    sigma2 = np.std(ks) #sigma2 = 174.55
    print(f'sigma1 = {sigma1} \nsigma2 = {sigma2}')
    Rxy = cov/(sigma1 * sigma2) # Rxy= 0.8874
    print('Rxy=', Rxy)
    R = np.corrcoef(zp, ks) # R= 0.8874
    print("R=", R[0, 1])
    print("Rxy = R:", round(Rxy, 3) == round(R[0, 1], 3)) # Rxy = R: True

    #ОТВЕТ
    # cov_np = 9157.84
    # Rxy= 0.8874


# task1()


# ЗАДАЧА 2
#Измерены значения IQ выборки студентов,
# обучающихся в местных технических вузах:
# 131, 125, 115, 122, 131, 115, 107, 99, 125, 111.
# Известно, что в генеральной совокупности IQ распределен нормально.
# Найдите доверительный интервал для математического ожидания с надежностью 0.95.


def task2():
    x = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])
    a = 0.05
    ta_2 = 1 - a / 2 # ta_2= 0.975
    print('ta_2=', ta_2)
    n = len(x)
    print(n)  # 10
    Mx = np.mean(x)  # 118.1
    sigma = np.std(x, ddof=1)  # 10.54
    print(Mx, sigma)
    t = stats.t.ppf(ta_2, n - 1) # t= 2.262
    print('t=', t)

    X1 = Mx - t * (sigma / np.sqrt(n))
    X2 = Mx + t * (sigma / np.sqrt(n))
    print(f"доверительный интервал: [{round(X1,3)} : {round(X2, 3)}] ")

    #ОТВЕТ:  доверительный интервал: [110.557 : 125.643]

# task2()


# ЗАДАЧА 3
# Известно, что рост футболистов в сборной распределен нормально
    # с дисперсией генеральной совокупности, равной 25 кв.см. Объем выборки равен 27,
    # среднее выборочное составляет 174.2. Найдите доверительный интервал для
    # математического
    # ожидания с надежностью 0.95.
def task3():
    D = 25
    sigma = np.sqrt(D)
    n = 27
    Mx = 174.2
    a = 0.95
    Zt = 1.96  # a/2 = 0.05/2 # из таблицы Z -значений при a=0.025

    X1 = Mx - Zt * (sigma / np.sqrt(n))
    X2 = Mx + Zt * (sigma / np.sqrt(n))
    print(f"доверительный интервал: [{round(X1, 3)} : {round(X2, 3)}] ")

    # ОТВЕТ:  доверительный интервал: [172.314 : 176.086]


task3()




